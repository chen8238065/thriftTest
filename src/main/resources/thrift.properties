#   传输格式(数据协议)  服务端使用的协议需要与客户端保持一致
# TBinaryProtocol – 二进制格式.
# TCompactProtocol – 压缩 二进制 格式
# TDenseProtocol -继承TCompactProtocol，不包含meta信息
# TJSONProtocol – JSON格式
# TSimpleJSONProtocol –提供JSON只写协议, 生成的文件很容易通过脚本语言解析。
# TDebugProtocol
protocol=TBinaryProtocol

# （通信方式）http://blog.csdn.net/whycold/article/details/8535932
# TSocket：采用TCP Socket进行数据传输，阻塞型socket,用于客户端，采用系统函数read和write进行读写数据；(BIO)
# TNonblockingSocket (NIO) 异步客户端使用
# TSSLSocket 继承TSocket，阻塞型socket,　用于客户端；采用openssl的接口进行读写数据。
# THttpTransport：采用Http传输协议进行数据传输
# TFileTransport – 以文件形式进行传输。
# TMemoryTransport – 将内存用于I/O. java实现时内部实际使用了简单的ByteArrayOutputStream。
# TZlibTransport – 使用zlib进行压缩， 与其他传输方式联合使用。当前无java实现。
# TFramedTransport – 以frame为单位进行传输，非阻塞式服务中使用。类似于Java中的NIO。
# TFastFramedTransport 与TFramedTransport相比，始终使用相同的Buffer，提高了内存的使用率。
# TSaslClientTransport与TSaslServerTransport， 提供SSL校验
client_transport=TNonblockingSocket
# TServerSocket　阻塞型socket, 用于服务器端,　accecpt到的socket类型都是TSocket（即阻塞型socket）；
# TNonblockingServerSocket 非阻塞型socket, 用于服务器端(NIO)
server_transport=TServerSocket

#   服务模型
# TSimpleServer – 简单的单线程服务模型，常用于测试
# TThreadedServer – 多线程服务模型，使用阻塞式IO，每个请求创建一个线程。(java 不支持)
# TThreadPoolServer – 多线程服务模型，使用标准的阻塞式IO，预先创建一组线程处理请求。
# TThreadedSelectorServer 允许你用多个线程来处理网络I/O。它维护了两个线程池，一个用来处理网络I/O，另一个用来进行请求的处理
# TNonblockingServer – 多线程服务模型，使用非阻塞式IO（需使用TFramedTransport数据传输方式）,只有一个线程来处理消息
# THsHaServer - 半同步半异步的服务模型，一个单独的线程用来处理网络I/O，一个worker线程池用来进行消息的处理
server=TSimpleServer


#Socket properties
SERVER_IP=localhost
SERVER_PORT=8888
TIMEOUT=40000

SERVER_URL=http://localhost:8000
HTTP_PORT=8000