/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.chapa.demo.thrift.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TypeTest implements org.apache.thrift.TBase<TypeTest, TypeTest._Fields>, java.io.Serializable, Cloneable, Comparable<TypeTest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TypeTest");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DDD_FIELD_DESC = new org.apache.thrift.protocol.TField("ddd", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BYTEDDD_FIELD_DESC = new org.apache.thrift.protocol.TField("byteddd", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField BOOLDDD_FIELD_DESC = new org.apache.thrift.protocol.TField("boolddd", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField I16DDD_FIELD_DESC = new org.apache.thrift.protocol.TField("i16ddd", org.apache.thrift.protocol.TType.I16, (short)6);
  private static final org.apache.thrift.protocol.TField I64DDD_FIELD_DESC = new org.apache.thrift.protocol.TField("i64ddd", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField DOUBLEDDD_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleddd", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField MAPDDD_FIELD_DESC = new org.apache.thrift.protocol.TField("mapddd", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField SETDDD_FIELD_DESC = new org.apache.thrift.protocol.TField("setddd", org.apache.thrift.protocol.TType.SET, (short)10);
  private static final org.apache.thrift.protocol.TField LISTDDD_FIELD_DESC = new org.apache.thrift.protocol.TField("listddd", org.apache.thrift.protocol.TType.LIST, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TypeTestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TypeTestTupleSchemeFactory());
  }

  public int id; // required
  public String name; // optional
  public ByteBuffer ddd; // required
  public byte byteddd; // required
  public boolean boolddd; // required
  public short i16ddd; // required
  public long i64ddd; // required
  public double doubleddd; // required
  public Map<Short,Short> mapddd; // required
  public Set<Short> setddd; // required
  public List<Short> listddd; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    DDD((short)3, "ddd"),
    BYTEDDD((short)4, "byteddd"),
    BOOLDDD((short)5, "boolddd"),
    I16DDD((short)6, "i16ddd"),
    I64DDD((short)7, "i64ddd"),
    DOUBLEDDD((short)8, "doubleddd"),
    MAPDDD((short)9, "mapddd"),
    SETDDD((short)10, "setddd"),
    LISTDDD((short)11, "listddd");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // DDD
          return DDD;
        case 4: // BYTEDDD
          return BYTEDDD;
        case 5: // BOOLDDD
          return BOOLDDD;
        case 6: // I16DDD
          return I16DDD;
        case 7: // I64DDD
          return I64DDD;
        case 8: // DOUBLEDDD
          return DOUBLEDDD;
        case 9: // MAPDDD
          return MAPDDD;
        case 10: // SETDDD
          return SETDDD;
        case 11: // LISTDDD
          return LISTDDD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __BYTEDDD_ISSET_ID = 1;
  private static final int __BOOLDDD_ISSET_ID = 2;
  private static final int __I16DDD_ISSET_ID = 3;
  private static final int __I64DDD_ISSET_ID = 4;
  private static final int __DOUBLEDDD_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DDD, new org.apache.thrift.meta_data.FieldMetaData("ddd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.BYTEDDD, new org.apache.thrift.meta_data.FieldMetaData("byteddd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.BOOLDDD, new org.apache.thrift.meta_data.FieldMetaData("boolddd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.I16DDD, new org.apache.thrift.meta_data.FieldMetaData("i16ddd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.I64DDD, new org.apache.thrift.meta_data.FieldMetaData("i64ddd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOUBLEDDD, new org.apache.thrift.meta_data.FieldMetaData("doubleddd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAPDDD, new org.apache.thrift.meta_data.FieldMetaData("mapddd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.SETDDD, new org.apache.thrift.meta_data.FieldMetaData("setddd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.LISTDDD, new org.apache.thrift.meta_data.FieldMetaData("listddd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TypeTest.class, metaDataMap);
  }

  public TypeTest() {
  }

  public TypeTest(
    int id,
    ByteBuffer ddd,
    byte byteddd,
    boolean boolddd,
    short i16ddd,
    long i64ddd,
    double doubleddd,
    Map<Short,Short> mapddd,
    Set<Short> setddd,
    List<Short> listddd)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.ddd = ddd;
    this.byteddd = byteddd;
    setBytedddIsSet(true);
    this.boolddd = boolddd;
    setBooldddIsSet(true);
    this.i16ddd = i16ddd;
    setI16dddIsSet(true);
    this.i64ddd = i64ddd;
    setI64dddIsSet(true);
    this.doubleddd = doubleddd;
    setDoubledddIsSet(true);
    this.mapddd = mapddd;
    this.setddd = setddd;
    this.listddd = listddd;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TypeTest(TypeTest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetDdd()) {
      this.ddd = org.apache.thrift.TBaseHelper.copyBinary(other.ddd);
;
    }
    this.byteddd = other.byteddd;
    this.boolddd = other.boolddd;
    this.i16ddd = other.i16ddd;
    this.i64ddd = other.i64ddd;
    this.doubleddd = other.doubleddd;
    if (other.isSetMapddd()) {
      Map<Short,Short> __this__mapddd = new HashMap<Short,Short>(other.mapddd);
      this.mapddd = __this__mapddd;
    }
    if (other.isSetSetddd()) {
      Set<Short> __this__setddd = new HashSet<Short>(other.setddd);
      this.setddd = __this__setddd;
    }
    if (other.isSetListddd()) {
      List<Short> __this__listddd = new ArrayList<Short>(other.listddd);
      this.listddd = __this__listddd;
    }
  }

  public TypeTest deepCopy() {
    return new TypeTest(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.ddd = null;
    setBytedddIsSet(false);
    this.byteddd = 0;
    setBooldddIsSet(false);
    this.boolddd = false;
    setI16dddIsSet(false);
    this.i16ddd = 0;
    setI64dddIsSet(false);
    this.i64ddd = 0;
    setDoubledddIsSet(false);
    this.doubleddd = 0.0;
    this.mapddd = null;
    this.setddd = null;
    this.listddd = null;
  }

  public int getId() {
    return this.id;
  }

  public TypeTest setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public TypeTest setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public byte[] getDdd() {
    setDdd(org.apache.thrift.TBaseHelper.rightSize(ddd));
    return ddd == null ? null : ddd.array();
  }

  public ByteBuffer bufferForDdd() {
    return ddd;
  }

  public TypeTest setDdd(byte[] ddd) {
    setDdd(ddd == null ? (ByteBuffer)null : ByteBuffer.wrap(ddd));
    return this;
  }

  public TypeTest setDdd(ByteBuffer ddd) {
    this.ddd = ddd;
    return this;
  }

  public void unsetDdd() {
    this.ddd = null;
  }

  /** Returns true if field ddd is set (has been assigned a value) and false otherwise */
  public boolean isSetDdd() {
    return this.ddd != null;
  }

  public void setDddIsSet(boolean value) {
    if (!value) {
      this.ddd = null;
    }
  }

  public byte getByteddd() {
    return this.byteddd;
  }

  public TypeTest setByteddd(byte byteddd) {
    this.byteddd = byteddd;
    setBytedddIsSet(true);
    return this;
  }

  public void unsetByteddd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BYTEDDD_ISSET_ID);
  }

  /** Returns true if field byteddd is set (has been assigned a value) and false otherwise */
  public boolean isSetByteddd() {
    return EncodingUtils.testBit(__isset_bitfield, __BYTEDDD_ISSET_ID);
  }

  public void setBytedddIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BYTEDDD_ISSET_ID, value);
  }

  public boolean isBoolddd() {
    return this.boolddd;
  }

  public TypeTest setBoolddd(boolean boolddd) {
    this.boolddd = boolddd;
    setBooldddIsSet(true);
    return this;
  }

  public void unsetBoolddd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOLDDD_ISSET_ID);
  }

  /** Returns true if field boolddd is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolddd() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOLDDD_ISSET_ID);
  }

  public void setBooldddIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOLDDD_ISSET_ID, value);
  }

  public short getI16ddd() {
    return this.i16ddd;
  }

  public TypeTest setI16ddd(short i16ddd) {
    this.i16ddd = i16ddd;
    setI16dddIsSet(true);
    return this;
  }

  public void unsetI16ddd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I16DDD_ISSET_ID);
  }

  /** Returns true if field i16ddd is set (has been assigned a value) and false otherwise */
  public boolean isSetI16ddd() {
    return EncodingUtils.testBit(__isset_bitfield, __I16DDD_ISSET_ID);
  }

  public void setI16dddIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I16DDD_ISSET_ID, value);
  }

  public long getI64ddd() {
    return this.i64ddd;
  }

  public TypeTest setI64ddd(long i64ddd) {
    this.i64ddd = i64ddd;
    setI64dddIsSet(true);
    return this;
  }

  public void unsetI64ddd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I64DDD_ISSET_ID);
  }

  /** Returns true if field i64ddd is set (has been assigned a value) and false otherwise */
  public boolean isSetI64ddd() {
    return EncodingUtils.testBit(__isset_bitfield, __I64DDD_ISSET_ID);
  }

  public void setI64dddIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I64DDD_ISSET_ID, value);
  }

  public double getDoubleddd() {
    return this.doubleddd;
  }

  public TypeTest setDoubleddd(double doubleddd) {
    this.doubleddd = doubleddd;
    setDoubledddIsSet(true);
    return this;
  }

  public void unsetDoubleddd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOUBLEDDD_ISSET_ID);
  }

  /** Returns true if field doubleddd is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleddd() {
    return EncodingUtils.testBit(__isset_bitfield, __DOUBLEDDD_ISSET_ID);
  }

  public void setDoubledddIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOUBLEDDD_ISSET_ID, value);
  }

  public int getMapdddSize() {
    return (this.mapddd == null) ? 0 : this.mapddd.size();
  }

  public void putToMapddd(short key, short val) {
    if (this.mapddd == null) {
      this.mapddd = new HashMap<Short,Short>();
    }
    this.mapddd.put(key, val);
  }

  public Map<Short,Short> getMapddd() {
    return this.mapddd;
  }

  public TypeTest setMapddd(Map<Short,Short> mapddd) {
    this.mapddd = mapddd;
    return this;
  }

  public void unsetMapddd() {
    this.mapddd = null;
  }

  /** Returns true if field mapddd is set (has been assigned a value) and false otherwise */
  public boolean isSetMapddd() {
    return this.mapddd != null;
  }

  public void setMapdddIsSet(boolean value) {
    if (!value) {
      this.mapddd = null;
    }
  }

  public int getSetdddSize() {
    return (this.setddd == null) ? 0 : this.setddd.size();
  }

  public java.util.Iterator<Short> getSetdddIterator() {
    return (this.setddd == null) ? null : this.setddd.iterator();
  }

  public void addToSetddd(short elem) {
    if (this.setddd == null) {
      this.setddd = new HashSet<Short>();
    }
    this.setddd.add(elem);
  }

  public Set<Short> getSetddd() {
    return this.setddd;
  }

  public TypeTest setSetddd(Set<Short> setddd) {
    this.setddd = setddd;
    return this;
  }

  public void unsetSetddd() {
    this.setddd = null;
  }

  /** Returns true if field setddd is set (has been assigned a value) and false otherwise */
  public boolean isSetSetddd() {
    return this.setddd != null;
  }

  public void setSetdddIsSet(boolean value) {
    if (!value) {
      this.setddd = null;
    }
  }

  public int getListdddSize() {
    return (this.listddd == null) ? 0 : this.listddd.size();
  }

  public java.util.Iterator<Short> getListdddIterator() {
    return (this.listddd == null) ? null : this.listddd.iterator();
  }

  public void addToListddd(short elem) {
    if (this.listddd == null) {
      this.listddd = new ArrayList<Short>();
    }
    this.listddd.add(elem);
  }

  public List<Short> getListddd() {
    return this.listddd;
  }

  public TypeTest setListddd(List<Short> listddd) {
    this.listddd = listddd;
    return this;
  }

  public void unsetListddd() {
    this.listddd = null;
  }

  /** Returns true if field listddd is set (has been assigned a value) and false otherwise */
  public boolean isSetListddd() {
    return this.listddd != null;
  }

  public void setListdddIsSet(boolean value) {
    if (!value) {
      this.listddd = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case DDD:
      if (value == null) {
        unsetDdd();
      } else {
        setDdd((ByteBuffer)value);
      }
      break;

    case BYTEDDD:
      if (value == null) {
        unsetByteddd();
      } else {
        setByteddd((Byte)value);
      }
      break;

    case BOOLDDD:
      if (value == null) {
        unsetBoolddd();
      } else {
        setBoolddd((Boolean)value);
      }
      break;

    case I16DDD:
      if (value == null) {
        unsetI16ddd();
      } else {
        setI16ddd((Short)value);
      }
      break;

    case I64DDD:
      if (value == null) {
        unsetI64ddd();
      } else {
        setI64ddd((Long)value);
      }
      break;

    case DOUBLEDDD:
      if (value == null) {
        unsetDoubleddd();
      } else {
        setDoubleddd((Double)value);
      }
      break;

    case MAPDDD:
      if (value == null) {
        unsetMapddd();
      } else {
        setMapddd((Map<Short,Short>)value);
      }
      break;

    case SETDDD:
      if (value == null) {
        unsetSetddd();
      } else {
        setSetddd((Set<Short>)value);
      }
      break;

    case LISTDDD:
      if (value == null) {
        unsetListddd();
      } else {
        setListddd((List<Short>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NAME:
      return getName();

    case DDD:
      return getDdd();

    case BYTEDDD:
      return Byte.valueOf(getByteddd());

    case BOOLDDD:
      return Boolean.valueOf(isBoolddd());

    case I16DDD:
      return Short.valueOf(getI16ddd());

    case I64DDD:
      return Long.valueOf(getI64ddd());

    case DOUBLEDDD:
      return Double.valueOf(getDoubleddd());

    case MAPDDD:
      return getMapddd();

    case SETDDD:
      return getSetddd();

    case LISTDDD:
      return getListddd();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case DDD:
      return isSetDdd();
    case BYTEDDD:
      return isSetByteddd();
    case BOOLDDD:
      return isSetBoolddd();
    case I16DDD:
      return isSetI16ddd();
    case I64DDD:
      return isSetI64ddd();
    case DOUBLEDDD:
      return isSetDoubleddd();
    case MAPDDD:
      return isSetMapddd();
    case SETDDD:
      return isSetSetddd();
    case LISTDDD:
      return isSetListddd();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TypeTest)
      return this.equals((TypeTest)that);
    return false;
  }

  public boolean equals(TypeTest that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_ddd = true && this.isSetDdd();
    boolean that_present_ddd = true && that.isSetDdd();
    if (this_present_ddd || that_present_ddd) {
      if (!(this_present_ddd && that_present_ddd))
        return false;
      if (!this.ddd.equals(that.ddd))
        return false;
    }

    boolean this_present_byteddd = true;
    boolean that_present_byteddd = true;
    if (this_present_byteddd || that_present_byteddd) {
      if (!(this_present_byteddd && that_present_byteddd))
        return false;
      if (this.byteddd != that.byteddd)
        return false;
    }

    boolean this_present_boolddd = true;
    boolean that_present_boolddd = true;
    if (this_present_boolddd || that_present_boolddd) {
      if (!(this_present_boolddd && that_present_boolddd))
        return false;
      if (this.boolddd != that.boolddd)
        return false;
    }

    boolean this_present_i16ddd = true;
    boolean that_present_i16ddd = true;
    if (this_present_i16ddd || that_present_i16ddd) {
      if (!(this_present_i16ddd && that_present_i16ddd))
        return false;
      if (this.i16ddd != that.i16ddd)
        return false;
    }

    boolean this_present_i64ddd = true;
    boolean that_present_i64ddd = true;
    if (this_present_i64ddd || that_present_i64ddd) {
      if (!(this_present_i64ddd && that_present_i64ddd))
        return false;
      if (this.i64ddd != that.i64ddd)
        return false;
    }

    boolean this_present_doubleddd = true;
    boolean that_present_doubleddd = true;
    if (this_present_doubleddd || that_present_doubleddd) {
      if (!(this_present_doubleddd && that_present_doubleddd))
        return false;
      if (this.doubleddd != that.doubleddd)
        return false;
    }

    boolean this_present_mapddd = true && this.isSetMapddd();
    boolean that_present_mapddd = true && that.isSetMapddd();
    if (this_present_mapddd || that_present_mapddd) {
      if (!(this_present_mapddd && that_present_mapddd))
        return false;
      if (!this.mapddd.equals(that.mapddd))
        return false;
    }

    boolean this_present_setddd = true && this.isSetSetddd();
    boolean that_present_setddd = true && that.isSetSetddd();
    if (this_present_setddd || that_present_setddd) {
      if (!(this_present_setddd && that_present_setddd))
        return false;
      if (!this.setddd.equals(that.setddd))
        return false;
    }

    boolean this_present_listddd = true && this.isSetListddd();
    boolean that_present_listddd = true && that.isSetListddd();
    if (this_present_listddd || that_present_listddd) {
      if (!(this_present_listddd && that_present_listddd))
        return false;
      if (!this.listddd.equals(that.listddd))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TypeTest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDdd()).compareTo(other.isSetDdd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDdd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ddd, other.ddd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByteddd()).compareTo(other.isSetByteddd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteddd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteddd, other.byteddd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoolddd()).compareTo(other.isSetBoolddd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolddd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolddd, other.boolddd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI16ddd()).compareTo(other.isSetI16ddd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI16ddd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i16ddd, other.i16ddd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI64ddd()).compareTo(other.isSetI64ddd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI64ddd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i64ddd, other.i64ddd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleddd()).compareTo(other.isSetDoubleddd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleddd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleddd, other.doubleddd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapddd()).compareTo(other.isSetMapddd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapddd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapddd, other.mapddd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSetddd()).compareTo(other.isSetSetddd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSetddd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setddd, other.setddd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListddd()).compareTo(other.isSetListddd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListddd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listddd, other.listddd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TypeTest(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("ddd:");
    if (this.ddd == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.ddd, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("byteddd:");
    sb.append(this.byteddd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("boolddd:");
    sb.append(this.boolddd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("i16ddd:");
    sb.append(this.i16ddd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("i64ddd:");
    sb.append(this.i64ddd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("doubleddd:");
    sb.append(this.doubleddd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapddd:");
    if (this.mapddd == null) {
      sb.append("null");
    } else {
      sb.append(this.mapddd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("setddd:");
    if (this.setddd == null) {
      sb.append("null");
    } else {
      sb.append(this.setddd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("listddd:");
    if (this.listddd == null) {
      sb.append("null");
    } else {
      sb.append(this.listddd);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TypeTestStandardSchemeFactory implements SchemeFactory {
    public TypeTestStandardScheme getScheme() {
      return new TypeTestStandardScheme();
    }
  }

  private static class TypeTestStandardScheme extends StandardScheme<TypeTest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TypeTest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DDD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ddd = iprot.readBinary();
              struct.setDddIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BYTEDDD
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.byteddd = iprot.readByte();
              struct.setBytedddIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BOOLDDD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.boolddd = iprot.readBool();
              struct.setBooldddIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // I16DDD
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.i16ddd = iprot.readI16();
              struct.setI16dddIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // I64DDD
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.i64ddd = iprot.readI64();
              struct.setI64dddIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DOUBLEDDD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.doubleddd = iprot.readDouble();
              struct.setDoubledddIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MAPDDD
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.mapddd = new HashMap<Short,Short>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  short _key2;
                  short _val3;
                  _key2 = iprot.readI16();
                  _val3 = iprot.readI16();
                  struct.mapddd.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setMapdddIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SETDDD
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set4 = iprot.readSetBegin();
                struct.setddd = new HashSet<Short>(2*_set4.size);
                for (int _i5 = 0; _i5 < _set4.size; ++_i5)
                {
                  short _elem6;
                  _elem6 = iprot.readI16();
                  struct.setddd.add(_elem6);
                }
                iprot.readSetEnd();
              }
              struct.setSetdddIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LISTDDD
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list7 = iprot.readListBegin();
                struct.listddd = new ArrayList<Short>(_list7.size);
                for (int _i8 = 0; _i8 < _list7.size; ++_i8)
                {
                  short _elem9;
                  _elem9 = iprot.readI16();
                  struct.listddd.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setListdddIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TypeTest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ddd != null) {
        oprot.writeFieldBegin(DDD_FIELD_DESC);
        oprot.writeBinary(struct.ddd);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BYTEDDD_FIELD_DESC);
      oprot.writeByte(struct.byteddd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BOOLDDD_FIELD_DESC);
      oprot.writeBool(struct.boolddd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I16DDD_FIELD_DESC);
      oprot.writeI16(struct.i16ddd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I64DDD_FIELD_DESC);
      oprot.writeI64(struct.i64ddd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DOUBLEDDD_FIELD_DESC);
      oprot.writeDouble(struct.doubleddd);
      oprot.writeFieldEnd();
      if (struct.mapddd != null) {
        oprot.writeFieldBegin(MAPDDD_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.I16, struct.mapddd.size()));
          for (Map.Entry<Short, Short> _iter10 : struct.mapddd.entrySet())
          {
            oprot.writeI16(_iter10.getKey());
            oprot.writeI16(_iter10.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.setddd != null) {
        oprot.writeFieldBegin(SETDDD_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I16, struct.setddd.size()));
          for (short _iter11 : struct.setddd)
          {
            oprot.writeI16(_iter11);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.listddd != null) {
        oprot.writeFieldBegin(LISTDDD_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.listddd.size()));
          for (short _iter12 : struct.listddd)
          {
            oprot.writeI16(_iter12);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TypeTestTupleSchemeFactory implements SchemeFactory {
    public TypeTestTupleScheme getScheme() {
      return new TypeTestTupleScheme();
    }
  }

  private static class TypeTestTupleScheme extends TupleScheme<TypeTest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TypeTest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.id);
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetDdd()) {
        optionals.set(1);
      }
      if (struct.isSetByteddd()) {
        optionals.set(2);
      }
      if (struct.isSetBoolddd()) {
        optionals.set(3);
      }
      if (struct.isSetI16ddd()) {
        optionals.set(4);
      }
      if (struct.isSetI64ddd()) {
        optionals.set(5);
      }
      if (struct.isSetDoubleddd()) {
        optionals.set(6);
      }
      if (struct.isSetMapddd()) {
        optionals.set(7);
      }
      if (struct.isSetSetddd()) {
        optionals.set(8);
      }
      if (struct.isSetListddd()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetDdd()) {
        oprot.writeBinary(struct.ddd);
      }
      if (struct.isSetByteddd()) {
        oprot.writeByte(struct.byteddd);
      }
      if (struct.isSetBoolddd()) {
        oprot.writeBool(struct.boolddd);
      }
      if (struct.isSetI16ddd()) {
        oprot.writeI16(struct.i16ddd);
      }
      if (struct.isSetI64ddd()) {
        oprot.writeI64(struct.i64ddd);
      }
      if (struct.isSetDoubleddd()) {
        oprot.writeDouble(struct.doubleddd);
      }
      if (struct.isSetMapddd()) {
        {
          oprot.writeI32(struct.mapddd.size());
          for (Map.Entry<Short, Short> _iter13 : struct.mapddd.entrySet())
          {
            oprot.writeI16(_iter13.getKey());
            oprot.writeI16(_iter13.getValue());
          }
        }
      }
      if (struct.isSetSetddd()) {
        {
          oprot.writeI32(struct.setddd.size());
          for (short _iter14 : struct.setddd)
          {
            oprot.writeI16(_iter14);
          }
        }
      }
      if (struct.isSetListddd()) {
        {
          oprot.writeI32(struct.listddd.size());
          for (short _iter15 : struct.listddd)
          {
            oprot.writeI16(_iter15);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TypeTest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ddd = iprot.readBinary();
        struct.setDddIsSet(true);
      }
      if (incoming.get(2)) {
        struct.byteddd = iprot.readByte();
        struct.setBytedddIsSet(true);
      }
      if (incoming.get(3)) {
        struct.boolddd = iprot.readBool();
        struct.setBooldddIsSet(true);
      }
      if (incoming.get(4)) {
        struct.i16ddd = iprot.readI16();
        struct.setI16dddIsSet(true);
      }
      if (incoming.get(5)) {
        struct.i64ddd = iprot.readI64();
        struct.setI64dddIsSet(true);
      }
      if (incoming.get(6)) {
        struct.doubleddd = iprot.readDouble();
        struct.setDoubledddIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.mapddd = new HashMap<Short,Short>(2*_map16.size);
          for (int _i17 = 0; _i17 < _map16.size; ++_i17)
          {
            short _key18;
            short _val19;
            _key18 = iprot.readI16();
            _val19 = iprot.readI16();
            struct.mapddd.put(_key18, _val19);
          }
        }
        struct.setMapdddIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TSet _set20 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.setddd = new HashSet<Short>(2*_set20.size);
          for (int _i21 = 0; _i21 < _set20.size; ++_i21)
          {
            short _elem22;
            _elem22 = iprot.readI16();
            struct.setddd.add(_elem22);
          }
        }
        struct.setSetdddIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.listddd = new ArrayList<Short>(_list23.size);
          for (int _i24 = 0; _i24 < _list23.size; ++_i24)
          {
            short _elem25;
            _elem25 = iprot.readI16();
            struct.listddd.add(_elem25);
          }
        }
        struct.setListdddIsSet(true);
      }
    }
  }

}

